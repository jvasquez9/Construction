package edu.utep.cs5374.ltlgenerator.regexpr;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * The Language class is a container class for a regular expression string,
 * the root node of the graph, a set containing the entire alphabet
 * of the language, a map called graph map which contains a key value pairing
 * of node name and the node itself for quicker retrieval of specific nodes.
 * There is also a boolean which indicates whether the graph is deterministic
 * or not(NFA's are parsed with a tree and DFA's can be traversed linearly.
 * The NFA algorithm works with DFA graphs but not the other way around.)
 * Languages are generated by the {@link NFAFactory} and {@link DFAFactory}
 * classes.
 * 
 * @author Robert McCain
 * @since 10/22/2014
 * @version 1.0
 *
 */
public class Language {
	private Node root;
	private Set<String> alphabet;
	private String regularExpression;
	private Map<String, Node> graphMap;
	private List<Node> nodeList;
	private boolean isDeterministic = false;

	public Language(Node root, Set<String> alphabet, String regularExpression, boolean isDeterministic)
	{
		this.root = root;
		this.alphabet = alphabet;
		this.regularExpression = regularExpression;
		graphMap = root.generateGraphMap();
		nodeList = root.generateNodeList();
		this.isDeterministic = isDeterministic;
	}
	
	public boolean recognizes(String s)
	{
		return root.recognizes(s, isDeterministic);
	}
	
	public Node getRoot()
	{
		return root;
	}
	
	public Set<String> getAlphabet()
	{
		return alphabet;
	}
	
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Regular Expression: " + regularExpression + "\n");
		sb.append("Alphabet: { ");
		for(String s : alphabet)
			sb.append(s + " ");
		sb.append("}\n\n");
		sb.append(root.toString());
		return sb.toString();
	}

	public String getRegExpr() {
		return regularExpression;
	}

	public Map<String, Node> getGraphMap() {
		return graphMap;
	}
	
	public List<Node> getNodeList(){
		return nodeList;
	}
	
	public List<Node> getFinalNodes()
	{
		return root.getFinalNodes();
	}
	
	public List<Node> getNonFinalNodes()
	{
		return root.getNonFinalNodes();
	}
	
	public Node getNodeByName(String name)
	{
		return graphMap.get(name);
	}
	
	public int getNodeCount()
	{
		return nodeList.size();
	}
	
	public boolean isDeterministic()
	{
		return isDeterministic;
	}
}
